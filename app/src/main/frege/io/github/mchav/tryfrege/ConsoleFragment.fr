module io.github.mchav.tryfrege.ConsoleFragment where

import froid.graphics.Typeface
import froid.os.Bundle
import froid.support.v4.app.Fragment
import froid.util.Log
import froid.view.LayoutInflater
import froid.view.View
import froid.view.ViewGroup
import froid.widget.EditText
import froid.widget.ScrollView
import froid.widget.TextView

import Control.Concurrent

import io.github.mchav.tryfrege.Net
import io.github.mchav.tryfrege.Utilities

newConsoleFragment :: MVar String -> STMutable RealWorld Fragment
newConsoleFragment sessionId = do
    let delegator = defaultFragmentDelegator.{ onCreateView = Just (onCreateView sessionId) }
    mkFragment delegator

onCreateView :: MVar String -> MutableIO Fragment -> MutableIO LayoutInflater ->
                MutableIO ViewGroup -> Maybe (MutableIO Bundle) -> IO (MutableIO View)
onCreateView sessionId this inf vg b = do
    v <- inf.inflate fragmentConsole vg False
    txtConsole <- asTextView v.findViewById console
    scroller <- asScrollView v.findViewById scrollerId
    scrollDown <- Runnable.new (scroller.fullScroll View.focusDown)
    scroller.post scrollDown
    inputText <- asEditText v.findViewById inputId
    eval <- v.findViewById evalButton
    setViewOnClick eval (\_ -> do
        expr <- liftM (CharSequence.toString) (inputText.getText)
        txtConsole.append (expr ++ "\n")
        sid <- readMVar sessionId
        res <- evaluateInput sid expr
        updateView res inputText txtConsole scroller )
    context <- this.getContext
    assetManager <- context.getAssets
    terminalFont <- Typeface.createFromAsset assetManager "fonts/TerminusTTF.ttf"
    txtConsole.setTypeface terminalFont
    return v

evaluateInput :: String -> String -> IO (MVar String)
evaluateInput sessionId expr = do
    result <- newEmptyMVar :: IO (MVar String)
    forkIO (evaluateExpression expr sessionId >>= putMVar result)
    return result

updateView :: MVar String -> MutableIO EditText -> MutableIO TextView -> MutableIO ScrollView -> IO ()
updateView s et tv sv = do
    res <- takeMVar s
    et.setText ""
    update <- Runnable.new (tv.append (res ++ "\nfrege> ") >> tv.invalidate >> tv.requestLayout >> sv.invalidate >> sv.requestLayout >> sv.fullScroll View.focusDown )
    tv.post update
